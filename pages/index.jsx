import React, { useState, useEffect } from "react";
import ContainerContent from "../components/ContainerContent";
import SnackAlert from "../components/SnackAlert";
import MuiDataTable from "../components/MuiDataTable";
import * as utils from '../helpers/utils'
import Button from "@mui/material/Button";


export default function AssetVulnerability() {

    const [data, setData] = useState([]);
    const [openAlert, setOpenAlert] = useState(false);

    const handleCloseAlert = (event, reason) => {
        if (reason === "clickaway") {
            return;
        }
        setOpenAlert(false);
    };

    useEffect(() => { //função para buscar todos os dados ao carregar a pagina
        async function fetchData() {

            let page = 1 //variavel para percorrer a paginação da view
            var data = []
            do {
                const response = await fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/?page=${page}`);
                var responseData = await response.json()
                for (let item of responseData.results) {
                    data.push(item)
                }
                page += 1
            } while (responseData.next != null) // faz a função acima até que a view seja percorrida a ultima pagina

            setData(data);
        }
        fetchData();
    }, []);

    function update_register(value, status) {
        //função para fazer update de status no registro selecionado

        const data = { status: status };

        fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/update_status/${value}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        location.reload()

    }

    // MUI Data Table ........
    const columns = [
        {
            name: "hostname",
            label: "HOSTNAME",
            flex: 1,
        },
        {
            name: "ip_addres",
            label: "IP ADDRES",
            flex: 1,
        },
        {
            name: "title",
            label: "TITLE",
            flex: 1,
        },
        {
            name: "severity",
            label: "SEVERITY",
            flex: 1,
        },
        {
            name: "cvss",
            label: "CVSS",
            flex: 1,
        },
        {
            name: "publication_date",
            label: "PUBLICATIONS DATE",
            flex: 1,
        },
        {
            name: "status",
            label: "STATUS",
            flex: 1,
        },
        {
            name: "id",
            label: "Check Demanda",
            flex: 1,
            options: {
                customBodyRender: (value, tableMeta, updateValue) => {
                    return (
                        <>
                            <Button onClick={() => {
                                update_register(value, 'CORRIGIDA');
                            }}>CORRIGIDA</Button>

                            <Button onClick={() => {
                                update_register(value, 'NÃO CORRIGIDA');
                            }}>NÃO CORRIGIDA</Button>
                        </>
                    )
                },
            }
        },
    ];

    const rows = data.map((row, idx) => {
        return {
            id: row.id,
            hostname: row.hostname,
            ip_addres: row.ip_addres,
            title: row.title,
            severity: utils.render_severity(row.severity),
            cvss: row.cvss,
            publication_date: utils.render_date(row.publication_date),
            status: utils.render_status(row.status)
        };
    });

    return (
        <>
            <ContainerContent title="Gerenciador de Vulnerabilidades">
                <MuiDataTable title={""} data={rows} columns={columns}></MuiDataTable>
                <SnackAlert message={"Não há dados para exibir."} open={openAlert} onClose={handleCloseAlert} />
            </ContainerContent>
        </>
    );
}
