import React, { useState, useEffect } from "react";
import Button from "@mui/material/Button";
import Stack from '@mui/material/Stack';
import LoadingButton from '@mui/lab/LoadingButton';
import LeaderboardIcon from '@mui/icons-material/Leaderboard';
import AddchartIcon from '@mui/icons-material/Addchart';
import Link from 'next/link';

import ContainerContent from "../components/ContainerContent";
import SnackAlert from "../components/SnackAlert";
import MuiDataTable from "../components/MuiDataTable";
import * as utils from '../helpers/utils'

export default function AssetVulnerability() {

    const [data, setData] = useState([]);
    const [openAlert, setOpenAlert] = useState(false);
    const [loading, setLoading] = React.useState(false);

    const handleCloseAlert = (event, reason) => {
        // Fecha automaticamente o alerta de registro
        if (reason === "clickaway") {
            return;
        }
        setOpenAlert(true);
    };

    function handleClick() {
        // Ao clicar no botao ENVIAR NOVOS DADOS ativa o Loading do botão e chama a função send_new_data 
        setLoading(true);
        send_new_data()
    }

    async function fetchData() {
        //função para buscar todos os dados ao carregar a pagina

        let page = 1 //variavel para percorrer a paginação da view
        var data = []
        do {
            const response = await fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/?page=${page}`)
            var responseData = await response.json()
            for (let item of responseData.results) { //percorre os 50 elementos da API adiciona na variavel data
                data.push(item)
            }
            page += 1
        } while (responseData.next != null) // faz a função acima até que a view seja percorrida a ultima pagina
        setData(data);
    }

    function update_register(value, status) {
        //função para fazer update de status no registro selecionado

        const data = { status: status };
        const req = fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/update_status/${value}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(function (response) {
                if (response.status == 200) {
                    fetchData()
                }
            })
    }

    async function send_new_data(value) {
        //Função para carregar novos dados do CSV no banco de dados
        
        var formData = new FormData();
        let form = document.getElementById("formCSV"); //captura form de adicionar arquivo
        let _csvFile = form.elements['csvFileInput'].files[0] //captura arquivo selecionado no input

        if (_csvFile === undefined || _csvFile === null) {
            setLoading(false)
            alert('Nenhum arquivo foi selecionado, clique em Escolher arquivo e selecione o csv!!')
        }

        formData.append("file", _csvFile);

        var requestOptions = {
            method: 'POST',
            body: formData,
            redirect: 'follow'
        };

        const req = fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/new_data/`, requestOptions)
            .then(function (response) {
                if (response.status == 200) {
                    setLoading(false)
                    fetchData()
                }
            })
    }

    useEffect(() => { fetchData() }, []); //Ao carregar a pagina chama a função fetchData

    // MUI Data Table 
    const columns = [
        {
            name: "hostname",
            label: "HOSTNAME",
        },
        {
            name: "ip_addres",
            label: "IP ADDRES",
        },
        {
            name: "title",
            label: "TITLE",
        },
        {
            name: "severity",
            label: "SEVERITY",
        },
        {
            name: "cvss",
            label: "CVSS",
        },
        {
            name: "publication_date",
            label: "PUBLICATIONS DATE",
        },
        {
            name: "status",
            label: "STATUS",
        },
        {
            name: "id",
            label: "Check Demanda",
            options: {
                customBodyRender: (value, tableMeta, updateValue) => {
                    return (
                        <>
                            <Button onClick={() => {
                                update_register(value, 'CORRIGIDA');
                            }}>Corrigida</Button>

                            <Button onClick={() => {
                                update_register(value, 'NÃO CORRIGIDA');
                            }}>Não Corrigida</Button>
                        </>
                    )
                },
            }
        },
    ];

    //linhas que serão exibidas na tabela
    const rows = data.map((row, idx) => {
        return {
            id: row.id,
            hostname: row.hostname,
            ip_addres: row.ip_addres,
            title: row.title,
            severity: utils.render_severity(row.severity),
            cvss: row.cvss,
            publication_date: utils.render_date(row.publication_date),
            status: utils.render_status(row.status)
        };
    });

    return (
        <ContainerContent title="Gerenciador de Vulnerabilidades">
            
            <Stack direction="row" spacing={1} sx={{ mt: 3, mb: 1 }}>
                <form id="formCSV">
                    <input
                        type={"file"}
                        id={"csvFileInput"}
                        accept={".csv"}
                    />
                </form>
            </Stack>

            <Stack direction="row" spacing={1} sx={{ mt: 1, mb: 1 }}>
                <LoadingButton
                    size="small"
                    onClick={handleClick}
                    endIcon={<AddchartIcon />}
                    loading={loading}
                    loadingPosition="end"
                    variant="contained"
                    sx={{ mt: 1, mb: 1, display: "flex", alignItems: "center", justifyContent: "flex-end" }}
                >
                    Gerar nova tabela
                </LoadingButton>
            </Stack>

            <Stack direction="row" >
                <Link href={'/metricas'} passHref >
                    <Button endIcon={<LeaderboardIcon />}
                    >
                        Gerar Métricas
                    </Button>
                </Link>
            </Stack>

            <MuiDataTable title={""} data={rows} columns={columns}></MuiDataTable>

            <SnackAlert message={"Não há dados para exibir."} open={openAlert} onClose={handleCloseAlert} />
        </ContainerContent>
    );
}