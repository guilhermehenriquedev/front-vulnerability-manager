import React, { useState, useEffect } from "react";
import { styled } from '@mui/material/styles';
import Button from "@mui/material/Button";
import Stack from '@mui/material/Stack';
import IconButton from '@mui/material/IconButton';
import DriveFolderUploadIcon from '@mui/icons-material/DriveFolderUpload';
import Tooltip from '@mui/material/Tooltip';
import SendIcon from '@mui/icons-material/Send';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import LoadingButton from '@mui/lab/LoadingButton';

import ContainerContent from "../components/ContainerContent";
import SnackAlert from "../components/SnackAlert";
import MuiDataTable from "../components/MuiDataTable";
import * as utils from '../helpers/utils'


export default function AssetVulnerability() {


    const [data, setData] = useState([]);
    const [openAlert, setOpenAlert] = useState(false);
    const [loading, setLoading] = React.useState(false);

    const handleCloseAlert = (event, reason) => {
        if (reason === "clickaway") {
            return;
        }
        setOpenAlert(false);
    };

    function handleClick() {
        setLoading(true);
        send_new_data()
    }

    async function fetchData() {
        //função para buscar todos os dados ao carregar a pagina

        let page = 1 //variavel para percorrer a paginação da view
        var data = []
        do {
            const response = await fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/?page=${page}`)
            var responseData = await response.json()
            for (let item of responseData.results) {
                data.push(item)
            }
            page += 1
        } while (responseData.next != null) // faz a função acima até que a view seja percorrida a ultima pagina
        setData(data);
    }

    function update_register(value, status) {
        //função para fazer update de status no registro selecionado

        const data = { status: status };
        const req = fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/update_status/${value}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(function(response){
            if (response.status == 200){
                fetchData()
            }
        })
    }

    async function send_new_data(value) {
        //Função para carregar novos dados do CSV no banco de dados

        var formData = new FormData();
        let form = document.getElementById("formCSV");
        let _csvFile = form.elements['csvFileInput'].files[0]

        formData.append("file", _csvFile);

        var requestOptions = {
            method: 'POST',
            body: formData,
            redirect: 'follow'
        };
        const req = fetch(`${process.env.NEXT_PUBLIC_DASH_URL}/api/vulnerability_report/new_data/`, requestOptions)
            .then(function(response){
                if (response.status == 200){
                    setLoading(false)
                    fetchData()
                }
            })
    }

    useEffect(() => { fetchData() }, []); //Ao carregar a pagina chama a função fetchData

    // MUI Data Table ........
    const columns = [
        {
            name: "hostname",
            label: "HOSTNAME",
            flex: 1,
        },
        {
            name: "ip_addres",
            label: "IP ADDRES",
            flex: 1,
        },
        {
            name: "title",
            label: "TITLE",
            flex: 1,
        },
        {
            name: "severity",
            label: "SEVERITY",
            flex: 1,
        },
        {
            name: "cvss",
            label: "CVSS",
            flex: 1,
        },
        {
            name: "publication_date",
            label: "PUBLICATIONS DATE",
            flex: 1,
        },
        {
            name: "status",
            label: "STATUS",
            flex: 1,
        },
        {
            name: "id",
            label: "Check Demanda",
            flex: 1,
            options: {
                customBodyRender: (value, tableMeta, updateValue) => {
                    return (
                        <>
                            <Button endIcon={<CheckCircleIcon />} onClick={() => {
                                update_register(value, 'CORRIGIDA');
                            }}>Corrigida</Button>

                            <Button endIcon={<ErrorIcon />} onClick={() => {
                                update_register(value, 'NÃO CORRIGIDA');
                            }}>Não Corrigida</Button>
                        </>
                    )
                },
            }
        },
    ];

    const rows = data.map((row, idx) => {
        return {
            id: row.id,
            hostname: row.hostname,
            ip_addres: row.ip_addres,
            title: row.title,
            severity: utils.render_severity(row.severity),
            cvss: row.cvss,
            publication_date: utils.render_date(row.publication_date),
            status: utils.render_status(row.status)
        };
    });




    return (
        <>
            <ContainerContent title="Gerenciador de Vulnerabilidades">
                <Stack direction="row" spacing={2} sx={{ mt: 2, mb: 2 }}>
                    <form id="formCSV">
                        <input
                            type={"file"}
                            id={"csvFileInput"}
                            accept={".csv"}
                        />
                    </form>
                    <LoadingButton
                        size="small"
                        onClick={handleClick}
                        endIcon={<SendIcon />}
                        loading={loading}
                        loadingPosition="end"
                        variant="contained"
                    >
                        Enviar Novos Dados
                    </LoadingButton>

                </Stack>
                <MuiDataTable title={""} data={rows} columns={columns}></MuiDataTable>
                <SnackAlert message={"Não há dados para exibir."} open={openAlert} onClose={handleCloseAlert} />
            </ContainerContent>
        </>
    );
}
